struct RMstruct
{
	
	// Polynomial smooth min (for copying and pasting into your shaders)
	/*

	float smin(float a, float b, float k) {
    	float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);
    	return mix(a, b, h) - k*h*(1.0-h);
	}
	*/
	float smoothMin(float a, float b, float k)
	{
		float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);
		return lerp(a,b,h) - k * h*(1.0 - h);
	}

	float RMSphere(float3 pos, float radius)
	{

		return length(pos) - radius;
	}

	float3 RMNormal(float3 pos)
	{
		float2 Off = float2(0.01, 0.0);
		
		return normalize(float3(
			getDistance(pos - Off.xyy) - getDistance(pos + Off.xyy), 
			getDistance(pos - Off.yxy) - getDistance(pos + Off.yxy), 
			getDistance(pos - Off.yyx) - getDistance(pos + Off.yyx) 
		));
	}

	// Distance field
	float getDistance(float3 pos)
	{
		float d = 0;
		// Build scene in hehre
		float sphere1 = RMSphere(pos, 75.0f);
		return sphere1;

		//return smoothMin(sphere1, smoothMin(sphere2, sphere3, GlueAmount), GlueAmount);


	}

	float2 DE(float3 pos)
	{
		float Power = 3.0+4.0*(sin(iTime/30.0)+1.0);

		float3 z = pos;
		float dr = .5;
		float r = 0.0;


		for (int i = 0; i < 64 ; i++) 
		{
			r = length(z);
			if (r>1.5)
			{
				break;
			} 

			// convert to polar coordinates
			float theta = acos(z.z/r);
			float phi = atan2(z.y,z.x);
			dr =  pow( r, Power-1.0)*Power*dr + 1.0;

			// scale and rotate the poiniTimre t
			float zr = pow( r,Power);
        
			theta = theta*Power;
			phi = phi*Power + abs(theta * 1.5);
		
			// convert back to cartesian coordinates
			z = zr*float3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
			z+=pos;

		}

		return float2(0.5*log(r)*r/dr,50.0*pow(dr,0.128/float(12)));

		

		/*
		    float Power = 3.0+4.0*(sin(iTime/30.0)+1.0);
	vec3 z = pos;
	float dr = .5;
	float r = 0.0;
	for (int i = 0; i < MANDELBROTSTEPS ; i++) {
		r = length(z);
		if (r>MAXMANDELBROTDIST) break;
		
		// convert to polar coordinates
		float theta = acos(z.z/r);
		float phi = atan(z.y,z.x);
		dr =  pow( r, Power-1.0)*Power*dr + 1.0;
		
        vec3 vagin = vec3(69.);
        
        
		// scale and rotate the poiniTimre t
		float zr = pow( r,Power);
        
		theta = theta*Power;
		phi = phi*Power + abs(theta * 1.5);
		
		// convert back to cartesian coordinates
		z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
		z+=pos;
	}
	return vec2(0.5*log(r)*r/dr,50.0*pow(dr,0.128/float(MARCHINGITERATIONS)));

		*/
		float2 res = 1.0;

		return res;
	}


	float2 getDistance2(float3 pos)
	{
		float d = 0;
		// Build scene in hehre
		float sphere1 = RMSphere(pos, 75.0f);

		float2 distance = DE(pos);

		return distance;

		//return smoothMin(sphere1, smoothMin(sphere2, sphere3, GlueAmount), GlueAmount);


	}

};


RMstruct RM;
float4  Col = 0;
float3 pos = WorldPos;
float3 normalWS = 0;
float theTime = 0;


for(int i = 0; i < MaxSteps; i++)
{
	
	/*


	if(SceneDepth < length(pos - CameraPosition))
	{
		break;
	}
	*/
	float distance = RM.getDistance(pos);

	float2 distance2 = RM.getDistance2(pos);



	// We are on a point
	if(distance2.x < 0.01)
	{	

		Col = float4(1.0, 0.0, 0.0, 1.0);
		normalWS = RM.RMNormal(pos);

		float3 posWS = pos;


		break;
	}
	pos += CameraVector * distance;
}

return float4(normalWS, Col.a);