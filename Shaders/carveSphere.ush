struct RMstruct
{
	
	// Polynomial smooth min (for copying and pasting into your shaders)
	/*

	float smin(float a, float b, float k) {
    	float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);
    	return mix(a, b, h) - k*h*(1.0-h);
	}
	*/
	float smoothMin(float a, float b, float k)
	{
		float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);
		return lerp(a,b,h) - k * h*(1.0 - h);
	}


	float sbox( float3 p, float3 b, float r )
	{
  		float3 q = abs(p) - b;
  		return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;
	}

	float RMSphere(float3 pos, float radius)
	{

		return length(pos) - radius;
	}

	float3 RMNormal(float3 pos)
	{
		float2 Off = float2(0.01, 0.0);
		
		return normalize(float3(
			getDistance(pos - Off.xyy) - getDistance(pos + Off.xyy), 
			getDistance(pos - Off.yxy) - getDistance(pos + Off.yxy), 
			getDistance(pos - Off.yyx) - getDistance(pos + Off.yyx) 
		));
	}

	// Distance field
	float getDistance(float3 pos)
	{
		float d = 0;
		// Build scene in hehre
		float sphere1 = RMSphere(pos - ObjectPos, 50.0f);
		float sphere2 = RMSphere((pos - ObjectPos) + float3(150. * sin(iTime * 2.), 15. + sin(iTime) * 22., 5. + cos(iTime) * 100.), 50.0f);

		float sphere3 = RMSphere((pos - ObjectPos) + float3(sin(iTime) * 120., sin(iTime), sin(iTime) * 120), 50.0f * abs(sin(iTime)));

		//return min(sphere1, min(sphere2, sphere3));


		float pincher = RMSphere((pos - ObjectPos), 75.0 * abs(sin(iTime)));

		//float sbox( float3 p, float3 b, float r )
		float cubeDist = sbox((pos - ObjectPos), float3(50.0f,50.0f,50.0f), .5);

		return max(cubeDist, -pincher);
		//return smoothMin(sphere1, smoothMin(sphere2, sphere3, GlueAmount), GlueAmount);


	}	
};


RMstruct RM;
float4  Col = 0;
float3 pos = WorldPos;
float3 normalWS = 0;
float theTime = 0;


for(int i = 0; i < MaxSteps; i++)
{
	
	if(SceneDepth < length(pos - CameraPosition))
	{
		break;
	}
	
	float distance = RM.getDistance(pos);

	// We are on a point
	if(distance < 0.01)
	{	

		Col = float4(1.0, 0.0, 0.0, 1.0);
		normalWS = RM.RMNormal(pos);
		break;
	}
	pos += CameraVector * distance;
}

return float4(normalWS, Col.a);